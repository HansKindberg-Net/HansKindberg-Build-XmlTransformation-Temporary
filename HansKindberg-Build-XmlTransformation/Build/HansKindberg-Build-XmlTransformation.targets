<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == '' AND $(WebApplicationProjectTypeGuid) != '' AND $(ProjectTypeGuids) != ''">$(ProjectTypeGuids.Contains($(WebApplicationProjectTypeGuid)))</IsWebApplicationProject>
		<IsWebApplicationProject Condition="$(IsWebApplicationProject) == ''">False</IsWebApplicationProject>
	</PropertyGroup>
	<PropertyGroup>
		<IsWebPublish Condition="$(IsWebPublish) == ''">False</IsWebPublish>
		<IsWebPublish Condition="$(IsWebApplicationProject) And $(WebPublishMethod) != ''">True</IsWebPublish>
		<!-- Output path to use for transformed App.config. -->
		<XmlTransformationIntermediate Condition="$(XmlTransformationIntermediate) == ''">$(IntermediateOutputPath)XmlTransformation\</XmlTransformationIntermediate>
		<!-- For webapplication projects we want the destination directory to be an empty string. -->
		<XmlTransformationOnBuildDestinationDirectory Condition="$(XmlTransformationOnBuildDestinationDirectory) == '' And $(IsWebApplicationProject) == 'False'">$(OutDir)</XmlTransformationOnBuildDestinationDirectory>
	</PropertyGroup>
	<PropertyGroup>
		<TransformOnBuild Condition="$(IsWebPublish)">False</TransformOnBuild>
	</PropertyGroup>
	<PropertyGroup>
		<BuildDependsOn Condition="$(TransformOnBuild)">
			TransformXmlFiles;
			$(BuildDependsOn)
		</BuildDependsOn>
	</PropertyGroup>
	<Target Name="AfterPostProfileTransformWebConfig">
		<GetPublishingLocalizedString
			ArgumentCount="3"
			Arguments="@(ProfileWebConfigsToTransform->'%(Destination)');%(TransformsExceptFirst);%(Destination)"
			Condition="@(ProfileWebConfigsToTransform) != '' And !%(ProfileWebConfigsToTransform.Exclude) And Exists('%(ProfileWebConfigsToTransform.Destination)') And %(ProfileWebConfigsToTransform.TransformsExceptFirst) != ''"
			ID="PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile"
			Importance="High"
			LogType="Message"
		/>
	</Target>
	<Target Name="AfterPostTransformWebConfig">
		<GetPublishingLocalizedString
			ArgumentCount="3"
			Arguments="@(WebConfigsToTransform->'%(Destination)');%(TransformsExceptFirst);%(Destination)"
			Condition="@(WebConfigsToTransform) != '' And !%(WebConfigsToTransform.Exclude) And Exists('%(WebConfigsToTransform.Destination)') And %(WebConfigsToTransform.TransformsExceptFirst) != ''"
			ID="PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile"
			Importance="High"
			LogType="Message"
		/>
	</Target>
	<PropertyGroup>
		<CollectFilesForProfileTransformWebConfigsDependsOn>
			CollectXmlFilesToTransformOnPublishProfile;
			$(CollectFilesForProfileTransformWebConfigsDependsOn)
		</CollectFilesForProfileTransformWebConfigsDependsOn>
	</PropertyGroup>
	<Target Name="CollectFilesForProfileTransformWebConfigs" DependsOnTargets="$(CollectFilesForProfileTransformWebConfigsDependsOn)" Condition="'$(CollectFilesForProfileTransformWebConfigs)' != 'false'">
		<ItemGroup>
			<ProfileWebConfigsToTransform Include="@(XmlFileToTransformOnPublishProfile)">
				<TransformFile>%(FirstTransform)</TransformFile>
				<TransformFileFolder>$(ProfileTransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
				<TransformOriginalFolder>$(ProfileTransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
				<TransformOutputFile>%(Destination)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			</ProfileWebConfigsToTransform>
			<_ProfileWebConfigsToTransformOuputs Include="@(ProfileWebConfigsToTransform->'%(TransformOutputFile)')" />
		</ItemGroup>
		<CallTarget Targets="$(OnAfterCollectFilesForProfileTransformWebConfigs)" RunEachTargetSeparately="False" />
	</Target>
	<PropertyGroup>
		<CollectWebConfigsToTransformDependsOn>
			CollectXmlFilesToTransformOnPublishBuild;
			$(CollectWebConfigsToTransformDependsOn)
		</CollectWebConfigsToTransformDependsOn>
	</PropertyGroup>
	<Target Name="CollectWebConfigsToTransform" DependsOnTargets="$(CollectWebConfigsToTransformDependsOn)" Condition="'$(CollectWebConfigsToTransform)' != 'false'">
		<ItemGroup>
			<WebConfigsToTransform Include="@(XmlFileToTransformOnPublishBuild)">
				<TransformFile>%(FirstTransform)</TransformFile>
				<TransformFileFolder>$(TransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
				<TransformOriginalFolder>$(TransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
				<TransformOutputFile>%(Destination)</TransformOutputFile>
				<TransformScope>$([System.IO.Path]::GetFullPath('$(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)'))</TransformScope>
			</WebConfigsToTransform>
			<_WebConfigsToTransformOuputs Include="@(WebConfigsToTransform->'%(TransformOutputFile)')" />
		</ItemGroup>
		<CallTarget Targets="$(OnAfterCollectWebConfigsToTransform)" RunEachTargetSeparately="False" />
	</Target>
	<PropertyGroup>
		<CollectXmlFilesToTransformOnBuildDependsOn></CollectXmlFilesToTransformOnBuildDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlFilesToTransformOnBuild" DependsOnTargets="$(CollectXmlFilesToTransformOnBuildDependsOn)">
		<CollectBuildTransformation
			AppConfigDestinationDirectory="$(XmlTransformationIntermediate)"
			Condition="$(TransformOnBuild)"
			DestinationDirectory="$(XmlTransformationOnBuildDestinationDirectory)"
			ExcludeFilesDependentUpon="$(XmlTransformationExcludeFilesDependentUpon)"
			ExcludeFilesDependentUponByFileName="$(XmlTransformationExcludeFilesDependentUponByFileName)"
			Files="@(Content);@(EmbeddedResource);@(None);@(Resource)"
			LogImportance="$(XmlTransformationLogImportance)"
			TransformName="$(Configuration)"
			XmlFileExtensions="@(XmlFileExtension)"
			XmlTransformationMaps="@(XmlTransformationMap)"
		>
			<Output TaskParameter="FilesToTransform" ItemName="XmlFileToTransformOnBuild" />
		</CollectBuildTransformation>
	</Target>
	<PropertyGroup>
		<CollectXmlFilesToTransformOnPublishBuildDependsOn></CollectXmlFilesToTransformOnPublishBuildDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlFilesToTransformOnPublishBuild" DependsOnTargets="$(CollectXmlFilesToTransformOnPublishBuildDependsOn)">
		<CollectBuildTransformation
			DestinationDirectory="$(TransformWebConfigIntermediateLocation)\transformed"
			ExcludeFilesDependentUpon="$(XmlTransformationExcludeFilesDependentUpon)"
			ExcludeFilesDependentUponByFileName="$(XmlTransformationExcludeFilesDependentUponByFileName)"
			Files="@(FilesForPackagingFromProject)"
			LogImportance="$(XmlTransformationLogImportance)"
			TransformName="$(Configuration)"
			XmlFileExtensions="@(XmlFileExtension)"
			XmlTransformationMaps="@(XmlTransformationMap)"
		>
			<Output TaskParameter="FilesToTransform" ItemName="XmlFileToTransformOnPublishBuild" />
		</CollectBuildTransformation>
	</Target>
	<PropertyGroup>
		<CollectXmlFilesToTransformOnPublishProfileDependsOn></CollectXmlFilesToTransformOnPublishProfileDependsOn>
	</PropertyGroup>
	<Target Name="CollectXmlFilesToTransformOnPublishProfile" DependsOnTargets="$(CollectXmlFilesToTransformOnPublishProfileDependsOn)">
		<CollectPublishTransformation
			DestinationDirectory="$(ProfileTransformWebConfigIntermediateLocation)\transformed"
			ExcludeFilesDependentUpon="$(XmlTransformationExcludeFilesDependentUpon)"
			ExcludeFilesDependentUponByFileName="$(XmlTransformationExcludeFilesDependentUponByFileName)"
			Files="@(FilesForPackagingFromProject)"
			LogImportance="$(XmlTransformationLogImportance)"
			TransformName="$(PublishProfileName)"
			XmlFileExtensions="@(XmlFileExtension)"
			XmlTransformationMaps="@(XmlTransformationMap)"
		>
			<Output TaskParameter="FilesToTransform" ItemName="XmlFileToTransformOnPublishProfile" />
		</CollectPublishTransformation>
	</Target>
	<PropertyGroup>
		<PrepareForCopyAppConfigFileDependsOn Condition="$(TransformOnBuild) And !$(IsWebApplicationProject)">
			SetAppConfigWithTargetPath
		</PrepareForCopyAppConfigFileDependsOn>
	</PropertyGroup>
	<Target
		Name="PrepareForCopyAppConfigFile"
		BeforeTargets="_CopyAppConfigFile"
		DependsOnTargets="$(PrepareForCopyAppConfigFileDependsOn)"
	/>
	<PropertyGroup>
		<ProfileTransformWebConfigDependsOn>
			$(ProfileTransformWebConfigDependsOn);
			AfterPostProfileTransformWebConfig
		</ProfileTransformWebConfigDependsOn>
	</PropertyGroup>
	<Target
		Name="ProfileTransformWebConfigCore"
		Condition="@(ProfileWebConfigsToTransform) != '' And $(ProfileTransformWebConfigEnabled) And !$(UseParameterizeToProfileTransformWebConfig)"
		DependsOnTargets="$(ProfileTransformWebConfigCoreDependsOn)"
		Inputs="@(ProfileWebConfigsToTransform);%(Transforms)"
		Outputs="$(_ProfileWebConfigTransformOutput)"
	>
		<HansKindberg.Build.XmlTransformation.Tasks.TransformXml
			Condition="!%(Exclude)"
			Destination="%(Destination)"
			LogImportance="Low"
			Source="@(ProfileWebConfigsToTransform)"
			SourceRootPath="$(WebPublishPipelineSourceRootDirectory)"
			StackTrace="$(ProfileTransformWebConfigStackTraceEnabled)"
			TransformRootPath="$(WebPublishPipelineTransformRootDirectory)"
			Transforms="%(Transforms)"
		/>
		<Message
			Importance="$(LogImportanceWhenActuallyTransformationTakingPlace)"
			Text="$(TransformationTakingPlace) Transforming %(ProfileWebConfigsToTransform.Identity) using %(ProfileWebConfigsToTransform.Transforms) into %(ProfileWebConfigsToTransform.Destination)."
		/>
	</Target>
	<PropertyGroup>
		<SetAppConfigWithTargetPathDependsOn Condition="$(TransformOnBuild) And !$(IsWebApplicationProject)">
			CollectXmlFilesToTransformOnBuild
		</SetAppConfigWithTargetPathDependsOn>
	</PropertyGroup>
	<Target
		Name="SetAppConfigWithTargetPath"
		DependsOnTargets="$(SetAppConfigWithTargetPathDependsOn)"
	>
		<ItemGroup>
			<_AppConfigToTransformOnBuild Include="@(XmlFileToTransformOnBuild)" Condition="%(IsAppConfig) == 'true'" />
		</ItemGroup>
		<PropertyGroup Condition="@(_AppConfigToTransformOnBuild) != ''">
			<AppConfig>$(XmlTransformationIntermediate)App.config</AppConfig>
		</PropertyGroup>
		<ItemGroup Condition="@(_AppConfigToTransformOnBuild) != ''">
			<AppConfigWithTargetPath Remove="@(AppConfigWithTargetPath)" />
			<AppConfigWithTargetPath Include="$(AppConfig)">
				<TargetPath>$(TargetFileName).config</TargetPath>
			</AppConfigWithTargetPath>
		</ItemGroup>
	</Target>
	<PropertyGroup>
		<TransformWebConfigDependsOn>
			$(TransformWebConfigDependsOn);
			AfterPostTransformWebConfig
		</TransformWebConfigDependsOn>
	</PropertyGroup>
	<Target
		Name="TransformWebConfigCore"
		Condition="@(WebConfigsToTransform)!='' And $(TransformWebConfigEnabled) And !$(UseParameterizeToTransformWebConfig)"
		DependsOnTargets="$(TransformWebConfigCoreDependsOn)"
		Inputs="@(WebConfigsToTransform);%(Transforms)"
		Outputs="$(_WebConfigTransformOutput)"
	>
		<HansKindberg.Build.XmlTransformation.Tasks.TransformXml
			Condition="!%(Exclude)"
			Destination="%(Destination)"
			LogImportance="Low"
			Source="@(WebConfigsToTransform)"
			SourceRootPath="$(WebPublishPipelineSourceRootDirectory)"
			StackTrace="$(TransformWebConfigStackTraceEnabled)"
			TransformRootPath="$(WebPublishPipelineTransformRootDirectory)"
			Transforms="%(Transforms)"
		/>
		<Message
			Importance="$(LogImportanceWhenActuallyTransformationTakingPlace)"
			Text="$(TransformationTakingPlace) Transforming %(WebConfigsToTransform.Identity) using %(WebConfigsToTransform.Transforms) into %(WebConfigsToTransform.Destination)."
		/>
	</Target>
	<PropertyGroup>
		<TransformXmlFilesDependsOn Condition="$(TransformOnBuild)">
			CollectXmlFilesToTransformOnBuild
		</TransformXmlFilesDependsOn>
	</PropertyGroup>
	<Target
		Name="TransformXmlFiles"
		DependsOnTargets="$(TransformXmlFilesDependsOn)"
	>
		<!-- This error tag is only here to discover bugs. -->
		<Error
			Condition="!$(TransformOnBuild)"
			Text="The target 'TransformXmlFiles' should not execute if TransformOnBuild = false."
		/>
		<HansKindberg.Build.XmlTransformation.Tasks.TransformXml
			Condition="$(TransformOnBuild) And @(XmlFileToTransformOnBuild) != ''"
			Destination="%(Destination)"
			LogImportance="High"
			Source="@(XmlFileToTransformOnBuild)"
			Transforms="%(Transforms)"
		/>
	
	</Target>
</Project>